// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package coreelf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type urouterMacEntry struct{ Address [6]uint8 }

type urouterVifEntry struct {
	VifType uint32
	Mac     [6]uint8
	Ip4     uint32
	Ip6u    uint64
	Ip6l    uint64
}

type urouterVifType uint32

const (
	urouterVifTypeUR_VIF_DOWNLINK urouterVifType = 0
	urouterVifTypeUR_VIF_UPLINK   urouterVifType = 1
	urouterVifTypeUR_VIF_IRB      urouterVifType = 2
)

// loadUrouter returns the embedded CollectionSpec for urouter.
func loadUrouter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UrouterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load urouter: %w", err)
	}

	return spec, err
}

// loadUrouterObjects loads urouter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*urouterObjects
//	*urouterPrograms
//	*urouterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadUrouterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadUrouter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// urouterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type urouterSpecs struct {
	urouterProgramSpecs
	urouterMapSpecs
}

// urouterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type urouterProgramSpecs struct {
	XdpRedirectFn *ebpf.ProgramSpec `ebpf:"xdp_redirect_fn"`
	XdpRouterFn   *ebpf.ProgramSpec `ebpf:"xdp_router_fn"`
}

// urouterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type urouterMapSpecs struct {
	BridgeTable *ebpf.MapSpec `ebpf:"bridge_table"`
	TxPorts     *ebpf.MapSpec `ebpf:"tx_ports"`
	UrTrapRb    *ebpf.MapSpec `ebpf:"ur_trap_rb"`
	VifTable    *ebpf.MapSpec `ebpf:"vif_table"`
}

// urouterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadUrouterObjects or ebpf.CollectionSpec.LoadAndAssign.
type urouterObjects struct {
	urouterPrograms
	urouterMaps
}

func (o *urouterObjects) Close() error {
	return _UrouterClose(
		&o.urouterPrograms,
		&o.urouterMaps,
	)
}

// urouterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadUrouterObjects or ebpf.CollectionSpec.LoadAndAssign.
type urouterMaps struct {
	BridgeTable *ebpf.Map `ebpf:"bridge_table"`
	TxPorts     *ebpf.Map `ebpf:"tx_ports"`
	UrTrapRb    *ebpf.Map `ebpf:"ur_trap_rb"`
	VifTable    *ebpf.Map `ebpf:"vif_table"`
}

func (m *urouterMaps) Close() error {
	return _UrouterClose(
		m.BridgeTable,
		m.TxPorts,
		m.UrTrapRb,
		m.VifTable,
	)
}

// urouterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadUrouterObjects or ebpf.CollectionSpec.LoadAndAssign.
type urouterPrograms struct {
	XdpRedirectFn *ebpf.Program `ebpf:"xdp_redirect_fn"`
	XdpRouterFn   *ebpf.Program `ebpf:"xdp_router_fn"`
}

func (p *urouterPrograms) Close() error {
	return _UrouterClose(
		p.XdpRedirectFn,
		p.XdpRouterFn,
	)
}

func _UrouterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed urouter_bpfeb.o
var _UrouterBytes []byte
