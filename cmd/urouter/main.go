/* Copyright (C) 2022-present, Eishun Kondoh <dreamdiagnosis@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU GPL as published by
 * the FSF; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package main

import (
	"errors"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"github.com/shun159/urouter/internal"
	"github.com/shun159/urouter/pkg/config"
	"github.com/shun159/urouter/pkg/coreelf"
	"github.com/shun159/urouter/pkg/maps/tx_ports"
	"github.com/shun159/urouter/pkg/maps/vif_table"
)

func main() {
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatalf("%+v", err)
	}

	if err := coreelf.Init(); err != nil {
		log.Fatalf("%+v", err)
	}

	if err := vif_table.InitVifTable(); err != nil {
		log.Fatalf("%+v", err)
	}

	if err := tx_ports.InitTxPorts(); err != nil {
		log.Fatalf("%+v", err)
	}

	ports := []config.TxPorts{
		{IfName: "veth1"},
		{IfName: "veth3"},
		{IfName: "veth5"},
		{IfName: "veth7"},
	}

	if err := config.SetTxPorts(ports); err != nil {
		log.Fatalf("%+v", err)
	}

	vif := []config.Vif{
		{IfName: "veth1", VifType: vif_table.UR_VIF_DOWNLINK},
		{IfName: "veth3", VifType: vif_table.UR_VIF_DOWNLINK},
		{IfName: "veth5", VifType: vif_table.UR_VIF_DOWNLINK},
		{IfName: "veth7", VifType: vif_table.UR_VIF_DOWNLINK},
	}

	if err := config.SetVif(vif); err != nil {
		log.Fatalf("%+v", err)
	}

	var vk uint32
	var vv uint32

	tx_ports_iter := tx_ports.Iter()
	for tx_ports_iter.Next(&vk, &vv) {
		fmt.Printf("vif k: %+v  v: %+v\n", vk, vv)
	}

	go internal.App()
	//if err := internal.App(); err != nil {
	//	log.Fatalf("%+v", err)
	//}

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.

	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	rb := coreelf.RingBuf()
	rd, err := ringbuf.NewReader(rb)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		fmt.Println(record)
	}
}
